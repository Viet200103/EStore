@page "/orderdetails/{orderId:int}"
@using EStore.Business.DTOs
@using EStore.Business.Services.IServices
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IOrderDetailService OrderDetailService

<PageTitle>Order Profile</PageTitle>

<h1>Order Profile</h1>

@if (orderDetails == null)
{
    <p>Loading...</p>
}
else if (!orderDetails.Any())
{
    <p>No order details found for this order.</p>
}
else
{
    <QuickGrid Class="table" Items="orderDetails.AsQueryable()">
        <PropertyColumn Title="Order ID" Property="o => o.OrderId" />
        <PropertyColumn Title="Product Name" Property="o => o.ProductName" />
        <PropertyColumn Title="Unit Price" Property="o => o.UnitPrice" />
        <PropertyColumn Title="Quantity" Property="o => o.Quantity" />
        <PropertyColumn Title="Discount" Property="o => o.Discount" />

        <TemplateColumn Context="orderdetail">
            <a href="@($"orderdetails/edit?orderdetailid={orderdetail.OrderDetailId}")">Edit</a> |
            <a href="@($"orderdetails/details?orderdetailid={orderdetail.OrderDetailId}")">Profile</a> |
            <a href="@($"orderdetails/delete?orderdetailid={orderdetail.OrderDetailId}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>
}

@code {
    [Parameter] public int orderId { get; set; } = 1;
    private IEnumerable<OrderDetailDTO>? orderDetails;

    protected override async Task OnInitializedAsync()
    {
        orderDetails = await OrderDetailService.GetAllOrderDetailByOrderAsync(orderId);
    }
}
