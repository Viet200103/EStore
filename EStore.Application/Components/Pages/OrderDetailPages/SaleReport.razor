@page "/salesreport"
@rendermode InteractiveServer
@using EStore.Business.Service.IService
@using EStore.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IOrderDetailService OrderDetailService

<PageTitle>Sales Report</PageTitle>

<h1>Sales Report</h1>

<div>
    <label>Start Date:</label>
    <input type="date" @bind="StartDate" />
    <label>End Date:</label>
    <input type="date" @bind="EndDate" />
    <button @onclick="async () => await LoadSalesReport()">Generate Report</button>
</div>

@if (salesReport == null)
{
    <p>Loading or no data available. Please select a date range and click Generate Report.</p>
}
else
if (!salesReport.Any())
{
    <p>No sales data found for the selected period.</p>
}
else
{
    <QuickGrid Class="table" Items="salesReport.AsQueryable()">
        <PropertyColumn Title="Order Date" Property="r => r.OrderDate" />
        <PropertyColumn Title="Product Name" Property="r => r.ProductName" />
        <PropertyColumn Title="Unit Price" Property="r => r.UnitPrice" />
        <PropertyColumn Title="Quantity" Property="r => r.Quantity" />
        <PropertyColumn Title="Discount" Property="r => r.Discount" />
        <PropertyColumn Title="Total Sales" Property="r => (r.UnitPrice * r.Quantity) * (1m - (decimal)r.Discount)" />
    </QuickGrid>

    <h3>Total Sales: @(salesReport.Sum(r => (r.UnitPrice * r.Quantity) * (1m - (decimal)r.Discount)).ToString("C"))</h3>
}

@code {
    private DateTime StartDate { get; set; } = DateTime.Today.AddDays(-30);
    private DateTime EndDate { get; set; } = DateTime.Today;
    private IList<SalesReport>? salesReport;

    private async Task LoadSalesReport()
    {
        salesReport = await OrderDetailService.GetSalesReportAsync(StartDate, EndDate);

        Console.WriteLine("Sales Report Count: " + salesReport?.Count);
        StateHasChanged();
    }
}
