@page "/products/create"
@using EStore.Business.DTOs
@using EStore.Business.Service.IService
@using EStore.Business.Services.IServices
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<div class="container py-4">
    <h3 class="my-4">Create Product</h3>

    <div class="row">
        <div class="col-md-6">
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger">@_errorMessage</div>
            }
            <EditForm method="post" Model="Product" OnValidSubmit="AddProduct" FormName="create" Enhance>
                <DataAnnotationsValidator/>

                <div class="mb-3">
                    <label for="productName" class="form-label">Product name:</label>
                    <InputText id="productName" @bind-Value="Product.ProductName" class="form-control" required/>
                    <ValidationMessage For="() => Product.ProductName" class="text-danger"/>
                </div>

                <div class="mb-3">
                    <label for="category" class="form-label">Category:</label>
                    <InputSelect id="category" class="form-control" @bind-Value="Product.CategoryId">
                        <option disabled selected="selected">Please select a category</option>
                        @foreach (var category in Categories)
                        {
                            <option value="@category.CategoryId">@category.CategoryName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Product.CategoryId" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="weight" class="form-label">Weight:</label>
                    <InputText id="weight" @bind-Value="Product.Weight" class="form-control"/>
                    <ValidationMessage For="() => Product.Weight" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="unitprice" class="form-label">UnitPrice:</label>
                    <InputNumber id="unitprice" @bind-Value="Product.UnitPrice" class="form-control"/>
                    <ValidationMessage For="() => Product.UnitPrice" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="unitslnstock" class="form-label">Units in stock:</label>
                    <InputNumber id="unitslnstock" @bind-Value="Product.UnitslnStock" class="form-control"/>
                    <ValidationMessage For="() => Product.UnitslnStock" class="text-danger"/>
                </div>
                <button type="submit" class="btn btn-primary col-4">Create</button>
            </EditForm>
        </div>
    </div>

    <div class="mt-2">
        <a href="/products">Back to List</a>
    </div>
</div>

@code {
    [SupplyParameterFromForm] private CreateProductDTO Product { get; set; } = new();

    private List<AddCategoryDTO> Categories { get; set; } = new();

    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoryService.GetAllCategoryAsync();
    }

    private async Task AddProduct()
    {
        _errorMessage = null;
        var isCreated = false;
        try
        {
            isCreated = await ProductService.AddProduct(Product);
            if (!isCreated)
            {
                _errorMessage = "Failed to create product, please try again later";
            }
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }

        if (isCreated)
        {
            NavigationManager.NavigateTo("/products", true);
        }
    }

}