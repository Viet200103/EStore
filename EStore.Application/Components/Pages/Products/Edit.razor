@page "/products/edit"
@attribute [Authorize(Roles = "Admin")]
@using EStore.Business.DTOs
@using EStore.Business.Service.IService
@using EStore.Business.Services.IServices
@using Microsoft.AspNetCore.Authorization
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Product</h2>
<hr />
@if (Product is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Product" OnValidSubmit="UpdateProduct" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <input type="hidden" name="Product.ProductId" value="@Product.ProductId" />
                <InputSelect id="categoryid" class="form-control" @bind-Value="Product.CategoryId">
                    <option value="">Please select a category</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.CategoryId">@category.CategoryName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Product.CategoryId" class="text-danger" />
                <div class="mb-3">
                    <label for="productname" class="form-label">ProductName:</label>
                    <InputText id="productname" @bind-Value="Product.ProductName" class="form-control" />
                    <ValidationMessage For="() => Product.ProductName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="weight" class="form-label">Weight:</label>
                    <InputText id="weight" @bind-Value="Product.Weight" class="form-control" />
                    <ValidationMessage For="() => Product.Weight" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="unitprice" class="form-label">UnitPrice:</label>
                    <InputNumber id="unitprice" @bind-Value="Product.UnitPrice" class="form-control" />
                    <ValidationMessage For="() => Product.UnitPrice" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="unitslnstock" class="form-label">UnitslnStock:</label>
                    <InputNumber id="unitslnstock" @bind-Value="Product.UnitslnStock" class="form-control" />
                    <ValidationMessage For="() => Product.UnitslnStock" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ProductId { get; set; }

    [SupplyParameterFromForm]
    private ProductDTO? Product { get; set; }

	private List<AddCategoryDTO> Categories { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
       
		Product ??= await ProductService.GetProductById(ProductId);
		Categories = await CategoryService.GetAllCategoryAsync();

        if (Product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateProduct()
    {
        

        try
        {
            if (Product is null)
            {
                NavigationManager.NavigateTo("products");
            }

			await ProductService.UpdateProduct(Product!);
            NavigationManager.NavigateTo("products");
        }
        catch (Exception ex)
        {

            if (Product is null)
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/products");
    }

}
