@page "/products"
@attribute [Authorize(Roles = "Admin")]
@using EStore.Business.DTOs
@using EStore.Business.Services.IServices
@using Microsoft.AspNetCore.Authorization
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Product</PageTitle>

<div class="container d-flex flex-column gap-4">
    <h3 class="my-4">Product List</h3>
    
    @if (_isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-end">
            <form class="d-flex col-8" @onsubmit="SearchProducts" @onsubmit:preventDefault>
                <input @bind="_searchTerm" 
                       class="form-control me-2 flex-grow-1" 
                       type="search" 
                       placeholder="@(_searchCondition == "ProductName" ? "Search products..." : "Search by price...")" 
                       aria-label="Search">
                <select @bind="_searchCondition" 
                        class="form-select me-2" 
                        style="flex-basis: 30%; min-width: 150px;">
                    <option value="ProductName">Product Name</option>
                    <option value="UnitPrice">Unit Price</option>
                </select>
                <button class="btn btn-outline-success px-5" type="submit">Search</button>
            </form>
            <a class="btn btn-primary ms-2" href="products/create">+ Create New</a>
        </div>

        <div class="table-scrollable">
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Product ID</th>
                        <th>Product Name</th>
                        <th>Category Name</th>
                        <th>Weight</th>
                        <th>Price</th>
                        <th>Stock</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in _productsDTO)
                    {
                        <tr>
                            <td>@product.ProductId</td>
                            <td>@product.ProductName</td>
                            <td>@product.Category?.CategoryName</td>
                            <td>@product.Weight</td>
                            <td>@product.UnitPrice</td>
                            <td>@product.UnitslnStock</td>
                            <td>
                                <a href="@($"products/edit?productid={product.ProductId}")">Edit</a>
                                <a href="@($"products/delete?productid={product.ProductId}")">Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <nav class="d-flex justify-content-end">
            <ul class="pagination">
                <li class="page-item @(_currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(_currentPage - 1)" disabled="@(_currentPage == 1)">Previous</button>
                </li>

                @for (int i = 1; i <= _totalPages; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(pageNumber == _currentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                    </li>
                }

                <li class="page-item @(_currentPage == _totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(_currentPage + 1)" disabled="@(_currentPage == _totalPages)">Next</button>
                </li>
            </ul>
        </nav>
    }
</div>

@code {
    private IEnumerable<ProductDTO> _productsDTO = Enumerable.Empty<ProductDTO>();
    private string _searchTerm = string.Empty;
    private int _totalPages = 1;
    private int _currentPage = 1;
    private readonly int _pageSize = 10;
    private string _searchCondition = "ProductName";
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts(_currentPage);
    }

    private async Task LoadProducts(int pageNumber, string? search = null, string? condition = null)
    {
        _isLoading = true;
        try
        {
            var result = await ProductService.GetProducts(pageNumber, _pageSize, search, condition);
            _productsDTO = result.productsDTO ?? Enumerable.Empty<ProductDTO>();
            _totalPages = result.totalPages;
            _currentPage = pageNumber;
        }
        catch (Exception ex)
        {
            // Add proper error handling/logging
            Console.WriteLine($"Error loading products: {ex.Message}");
            _productsDTO = Enumerable.Empty<ProductDTO>();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > _totalPages || _isLoading) return;
        await LoadProducts(pageNumber, _searchTerm, _searchCondition);
    }

    private async Task SearchProducts()
    {
        if (_isLoading) return;
        _currentPage = 1;
        await LoadProducts(_currentPage, _searchTerm, _searchCondition);
    }
}