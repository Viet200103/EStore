@page "/orders/delete"
@using EStore.Business.Services.IServices
@using EStore.Business.DTOs
@inject IOrderService OrderService
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete Order</h1>

<p>Are you sure you want to delete this order?</p>
<div>
    <h2>Order</h2>
    <hr />
    @if (order is null)
    {
        <p><em>Not Found</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">MemberId</dt>
            <dd class="col-sm-10">@order.MemberId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">OrderDate</dt>
            <dd class="col-sm-10">@order.OrderDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RequireDate</dt>
            <dd class="col-sm-10">@order.RequireDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ShippedDate</dt>
            <dd class="col-sm-10">@order.ShippedDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Freight</dt>
            <dd class="col-sm-10">@order.Freight</dd>
        </dl>
        <EditForm method="post" Model="order" OnValidSubmit="DeleteOrder" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(order is null)">Delete</button> |
            <a href="/orders">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private OrderDTO? order;

    [Parameter]
    [SupplyParameterFromQuery]
    public int OrderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        order = await OrderService.GetOrderByIdAsync(OrderId);
    }

    private async Task DeleteOrder()
    {
        await OrderService.DeleteOrderAsync(OrderId);
        NavigationManager.NavigateTo("/orders");
    }
}
