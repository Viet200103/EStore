@page "/orders/details"
@using EStore.Business.DTOs
@using EStore.Business.Services.IServices
@using Microsoft.EntityFrameworkCore
@using EStore.Data.Models
@using System.Globalization
@inject IOrderService Service
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Order</h2>
    <hr />
    @if (orderDTO is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">MemberId</dt>
            <dd class="col-sm-10">@orderDTO.MemberEmail</dd>

            <dt class="col-sm-2">OrderDate</dt>
            <dd class="col-sm-10">@orderDTO.OrderDate</dd>

            <dt class="col-sm-2">RequireDate</dt>
            <dd class="col-sm-10">@orderDTO.RequireDate</dd>

            <dt class="col-sm-2">ShippedDate</dt>
            <dd class="col-sm-10">@orderDTO.ShippedDate</dd>

            <dt class="col-sm-2">Freight</dt>
            <dd class="col-sm-10">
                @orderDTO.Freight?.ToString("C", _USD)
            </dd>
        </dl>

        <h3>Order Items</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Quantity</th>
                    <th>Unit Price</th>
                    <th>Discount</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @if (orderDTO.OrderDetails != null && orderDTO.OrderDetails.Any())
                {
                    @foreach (var item in orderDTO.OrderDetails)
                    {
                        var total = (double)(item.Quantity * item.UnitPrice) * (1 - item.Discount / 100);
                        <tr>
                            <td>@item.ProductName</td>
                            <td>@item.Quantity</td>
                            <td>@item.UnitPrice.ToString("C", _USD)</td>
                            <td>@($"{item.Discount}%")</td>
                            <td>@total.ToString("C", _USD)</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center">No items found.</td>
                    </tr>
                }
            </tbody>
        </table>

        <h3>Total Amount: @TotalAmount.ToString("C", _USD)</h3>

        <div>
            <a href="@($"/orders/edit?orderid={orderDTO.OrderId}")">Edit</a> |
            <a href="@($"/orders")">Back to List</a>
        </div>
    }
</div>

@code {
    private OrderDTO? orderDTO;
    private double TotalAmount = 0;
    private readonly CultureInfo _USD = new("en-US");

    [SupplyParameterFromQuery]
    private int OrderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        orderDTO = await Service.GetOrderByIdAsync(OrderId);

        if (orderDTO is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            if (orderDTO.OrderDetails != null)
            {
                TotalAmount = orderDTO.OrderDetails.Sum(item =>
                    (double)(item.Quantity * item.UnitPrice) * (1 - item.Discount / 100)) 
                    + (double)(orderDTO.Freight ?? 0);
            }
        }
    }
}
