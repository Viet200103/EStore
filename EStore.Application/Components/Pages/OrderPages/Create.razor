@page "/orders/create"
@using Microsoft.EntityFrameworkCore
@using EStore.Business.DTOs
@using EStore.Business.Services.IServices
@inject IOrderService OrderService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Order</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="OrderDTO" OnValidSubmit="CreateOrder" FormName="CreateOrderForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="memberemail" class="form-label">Member Email:</label>
                <InputText id="memberemail" @bind-Value="OrderDTO.MemberEmail" class="form-control" />
                <ValidationMessage For="() => OrderDTO.MemberEmail" class="text-danger" />
            </div>
            <div class="mb-3">
                <label class="form-label">Select Products:</label>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Unit Price</th>
                                <th>Stock</th>
                                <th>Quantity</th>
                                <th>Discount</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in AvailableProducts)
                            {
                                <tr>
                                    <td>@product.ProductName</td>
                                    <td>@product.UnitPrice</td>
                                    <td>@product.UnitslnStock</td>
                                    <td>
                                        <InputNumber @bind-Value="product.OrderQuantity" class="form-control"/>
                                    </td>
                                    <td>
                                        <InputNumber @bind-Value="product.Discount" class="form-control"/>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Create Order</button>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div>
    <a href="/orders">Back to List</a>
</div>

@code {
    private OrderDTO OrderDTO = new();
    private List<CreateProductOrderDTO> AvailableProducts = new();
    private string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        AvailableProducts = await OrderService.GetAvailableProductsAsync();
    }

    private async Task CreateOrder()
    {
        if (!AvailableProducts.Any(p => p.OrderQuantity > 0))
        {
            ErrorMessage = "Please select at least one product.";
            return;
        }

        if(AvailableProducts.Any(p => p.OrderQuantity < 0))
        {
            ErrorMessage = "One or more product have invalid Quantiy";
            return;
        }

        if (AvailableProducts.Any(p => p.OrderQuantity > p.UnitslnStock))
        {
            ErrorMessage = "One or more products exceed available stock.";
            return;
        }

        if (AvailableProducts.Any(p => p.Discount < 0))
        {
            ErrorMessage = "One or more product have invalid Discount";
            return;
        }

        OrderDTO.OrderDetails = AvailableProducts
            .Where(p => p.OrderQuantity > 0)
            .Select(p => new OrderDetailDTO
                {
                    ProductId = p.ProductId,
                    UnitPrice = p.UnitPrice,
                    Quantity = p.OrderQuantity,
                    Discount = p.Discount
                })
            .ToList();

        try
        {
            await OrderService.CreateOrderAsync(OrderDTO);
            NavigationManager.NavigateTo("/orders");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
 }
