@page "/Login"
@using EStore.Business.Contants
@using EStore.Business.DTOs
@using EStore.Business.Exceptions
@using EStore.Business.Service.IService
@inject NavigationManager Navigation

<style>
    html, body {
        height: 100%;
        margin: 0;
    }

    .login-container {
        min-height: 100vh; /* Full viewport height */
        width: 100vw;
        display: flex;
        align-items: center; /* Vertical centering */
        justify-content: center; /* Horizontal centering */
    }
</style>

<div class="login-container">
    <div class="login-box col-3">
        <h4 class="text-center">Welcome to EStore</h4>
        <p class="mb-3 fs-6 text-center">Login to your account</p>
        <EditForm Model="@this" OnValidSubmit="@HandleLogin" FormName="Login" Enhance>
            <DataAnnotationsValidator/>

            <div class="form-group mb-3">
                <label>Email</label>
                <InputText @bind-Value="LoginDTO.Email" class="form-control"/>
                <ValidationMessage For="() => LoginDTO.Email" class="text-danger" />
            </div>
            <div class="form-group mb-3">
                <label>Password</label>
                <InputText type="password" @bind-Value="LoginDTO.Password" class="form-control"/>
                <ValidationMessage For="() => LoginDTO.Password" class="text-danger" />
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
            <div class="text-danger mb-3">@errorMessage</div>
            }
            <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {

    private string? errorMessage;
    
    [SupplyParameterFromForm] private LoginRequestDTO LoginDTO { get; set; } = new();
    
    [Inject]
    public required IHttpContextAccessor HttpContextAccessor { get; set; }

    [Inject] 
    public required IAuthService AuthService { get; set; }

    [Inject] 
    public required IConfiguration Configuration { get; set; }
    
    private async Task HandleLogin()
    {
        errorMessage = "";
        try
        {
            var adminEmail = Configuration["admin:email"];
            if (adminEmail != null && LoginDTO.Email!.ToLower().Trim() == adminEmail.ToLower().Trim())
            {
                var adminToken = await AuthService.AdminLogin(LoginDTO);
                HttpContextAccessor.HttpContext?.Response.Cookies.Append(Utils.AccessToken, adminToken.Token);
                Navigation.NavigateTo("/", forceLoad: false);
                return;
            }
            var accessToken = await AuthService.LoginAsync(LoginDTO);
            HttpContextAccessor.HttpContext?.Response.Cookies.Append(Utils.AccessToken, accessToken.Token);
            Navigation.NavigateTo("/", forceLoad: false);
        }
        catch (UserNotFoundException)
        {
            errorMessage = "Email is not exists";
        }
        catch (InvalidPasswordException)
        {
            errorMessage = "Password is incorrect";
        }
    }
}