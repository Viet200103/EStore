@page "/members/delete"
@attribute [Authorize(Roles = "Admin")]
@using EStore.Business.DTOs
@using EStore.Business.Services.IServices
@using Microsoft.AspNetCore.Authorization
@inject IMemberService MemberService
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Member</h2>
    <hr />
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    @if (member is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@member.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CompanyName</dt>
            <dd class="col-sm-10">@member.CompanyName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">City</dt>
            <dd class="col-sm-10">@member.City</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Country</dt>
            <dd class="col-sm-10">@member.Country</dd>
        </dl>
        <EditForm method="post" Model="member" OnValidSubmit="DeleteMember" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(member is null)">Delete</button> |
            <a href="/members">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private MemberDTO? member;

    [SupplyParameterFromQuery]
    private int MemberId { get; set; }
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        member = await MemberService.GetMemberById(MemberId);

        if (member is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteMember()
    {
        try
        {
            await MemberService.DeleteMember(MemberId);
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to delete member. " + ex.Message;
        }
        finally
        {
            NavigationManager.NavigateTo("/members");
        }
    }
}