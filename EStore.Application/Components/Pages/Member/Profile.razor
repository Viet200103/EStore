@page "/members/profile"
@attribute [Authorize(Roles = "Member")]
@using EStore.Business.DTOs
@using EStore.Business.Security
@using EStore.Business.Services.IServices
@using Microsoft.AspNetCore.Authorization
@inject IMemberService Service
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>Profile</PageTitle>

<div class="container py-4">
    <div>
        <h3 class="my-4">Profile</h3>

        @if (_member is null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <dl class="row">
                <dt class="col-sm-2">Email</dt>
                <dd class="col-sm-10">@_member.Email</dd>
                <dt class="col-sm-2">CompanyName</dt>
                <dd class="col-sm-10">@_member.CompanyName</dd>
                <dt class="col-sm-2">City</dt>
                <dd class="col-sm-10">@_member.City</dd>
                <dt class="col-sm-2">Country</dt>
                <dd class="col-sm-10">@_member.Country</dd>
            </dl>
            <div class="mt-4">
                <a class="btn btn-outline-secondary col-2" href="@($"/members/edit/{_member.MemberId}")">Edit Profile</a>
            </div>
        }
    </div>
</div>

@code {
    private MemberDTO? _member;
    private int _userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        var userHelp = new UserHelper(user);
        _userId = userHelp.GetUserId();
        _member = await Service.GetMemberById(_userId);

        if (_member is null)
        {
            NavigationManager.NavigateTo("/not-found");
        }
    }

}