@page "/members/create"
@attribute [Authorize(Roles = "Admin")]
@using EStore.Business.DTOs
@using EStore.Business.Services.IServices
@using Microsoft.AspNetCore.Authorization
@inject IMemberService Service
@inject NavigationManager NavigationManager

<PageTitle>Register Member</PageTitle>

<div class="container py-4">

    <h3 class="my-4">Register member account</h3>
    
    <div class="row">
        <div class="col-md-6">
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger">@_errorMessage</div>
            }
            <EditForm method="post" Model="Member" OnValidSubmit="AddMember" FormName="create" Enhance>
                <DataAnnotationsValidator/>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Member.Email" class="form-control" required type="email"/>
                    <ValidationMessage For="() => Member.Email" class="text-danger"/>
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label">Password</label>
                    <InputText id="password" @bind-Value="Member.Password" class="form-control" required type="password"/>
                    <ValidationMessage For="() => Member.Password" class="text-danger"/>
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label">Confirm password</label>
                    <InputText id="confirm-password" @bind-Value="Member.ConfirmPassword" class="form-control" required type="password"/>
                    <ValidationMessage For="() => Member.ConfirmPassword" class="text-danger"/>
                </div>

                <div class="mb-3">
                    <label for="companyname" class="form-label">CompanyName:</label>
                    <InputText id="companyname" @bind-Value="Member.CompanyName" class="form-control"/>
                    <ValidationMessage For="() => Member.CompanyName" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="city" class="form-label">City:</label>
                    <InputText id="city" @bind-Value="Member.City" class="form-control"/>
                    <ValidationMessage For="() => Member.City" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="country" class="form-label">Country:</label>
                    <InputText id="country" @bind-Value="Member.Country" class="form-control"/>
                    <ValidationMessage For="() => Member.Country" class="text-danger"/>
                </div>
                <button type="submit" class="btn btn-primary col-3" disabled="@_isLoading">
                    @(_isLoading ? "Creating..." : "Create")
                </button>
            </EditForm>
        </div>
    </div>

    <div class="mt-3">
        <a href="/members">Back to List</a>
    </div>
</div>

@code {

    [SupplyParameterFromForm] private CreateMemberDTO Member { get; set; } = new();

    private bool _isLoading;

    private string? _errorMessage;

    private async Task AddMember()
    {
        _errorMessage = null;
        var isCreated = false;
        try
        {
            _isLoading = true;
            isCreated = await Service.CreateMemberAsync(Member);
            if (!isCreated)
            {
                _errorMessage = "Failed to create member, please try again later!";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _isLoading = false;
        }

        if (isCreated)
        {
            NavigationManager.NavigateTo("/members", true);
        }
    }

}