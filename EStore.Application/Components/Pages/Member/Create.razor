@page "/members/create"
@using EStore.Business.DTOs
@using EStore.Business.Services.IServices
@using Microsoft.EntityFrameworkCore
@using EStore.Data.Models
@inject IMemberService service
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Member</h2>
<hr />
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Member" OnValidSubmit="AddMember" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" @bind-Value="Member.Email" class="form-control" />
                <ValidationMessage For="() => Member.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="companyname" class="form-label">CompanyName:</label>
                <InputText id="companyname" @bind-Value="Member.CompanyName" class="form-control" />
                <ValidationMessage For="() => Member.CompanyName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="city" class="form-label">City:</label>
                <InputText id="city" @bind-Value="Member.City" class="form-control" />
                <ValidationMessage For="() => Member.City" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="country" class="form-label">Country:</label>
                <InputText id="country" @bind-Value="Member.Country" class="form-control" />
                <ValidationMessage For="() => Member.Country" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @(isLoading ? "Creating..." : "Create")
            </button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/members">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private CreateMemberDTO Member { get; set; } = new();
    private bool isLoading = false;
    private string? errorMessage;
    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddMember()
    {
        try
        {
            isLoading = true;
            await service.CreateMemberAsync(Member);
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to create member. " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
        NavigationManager.NavigateTo("/members");
    }
}