@page "/members/edit"
@using EStore.Business.DTOs
@using EStore.Business.Services.IServices
@using Microsoft.EntityFrameworkCore
@using EStore.Data.Models
@inject IMemberService service
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Member</h2>
<hr />
@if (Member is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Member" OnValidSubmit="UpdateMember" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Member.MemberId" value="@Member.MemberId" />
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Member.Email" class="form-control" />
                    <ValidationMessage For="() => Member.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="companyname" class="form-label">CompanyName:</label>
                    <InputText id="companyname" @bind-Value="Member.CompanyName" class="form-control" />
                    <ValidationMessage For="() => Member.CompanyName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="city" class="form-label">City:</label>
                    <InputText id="city" @bind-Value="Member.City" class="form-control" />
                    <ValidationMessage For="() => Member.City" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="country" class="form-label">Country:</label>
                    <InputText id="country" @bind-Value="Member.Country" class="form-control" />
                    <ValidationMessage For="() => Member.Country" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/members">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int MemberId { get; set; }

    [SupplyParameterFromForm]
    private MemberDTO? Member { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Member ??= await service.GetMemberByIdAsync(MemberId);

        if (Member is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateMember()
    {
        try
        {
            await service.UpdateMemberAsync(Member);
        }
        catch (Exception ex)
        {
            if (Member == null)
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
        NavigationManager.NavigateTo("/members");
    }
}