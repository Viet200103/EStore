@page "/sales-report"
@rendermode InteractiveServer
@using EStore.Business.Services.IServices
@using EStore.Data.Models
@inject IOrderDetailService OrderDetailService

<PageTitle>Sales Report</PageTitle>

<div class="container d-flex flex-column gap-4">
    <h3 class="my-4">Sale Report</h3>

    <div class="d-flex align-items-center gap-4 justify-content-end">
        <div class="d-flex align-items-center gap-2 flex-nowrap">
            <label for="startDate" class="form-label mb-0">Start Date:</label>
            <input type="date" id="startDate" class="form-control form-control w-auto" @bind="StartDate"/>
        </div>
        <div class="d-flex align-items-center gap-2 flex-nowrap">
            <label for="endDate" class="form-label mb-0">End Date:</label>
            <input type="date" id="endDate" class="form-control form-control w-auto" @bind="EndDate"/>
        </div>
        <div>
            <button class="btn btn-primary " @onclick="async () => await LoadSalesReport()">Generate Report</button>
        </div>
    </div>
    @if (salesReport == null)
    {
        <p>Loading or no data available. Please select a date range and click Generate Report.</p>
    }
    else if (!salesReport.Any())
    {
        <p>No sales data found for the selected period.</p>
    }
    else
    {
        <div class="table-scrollable">
            <table class="table table-striped table-bordered border-4">
                <thead>
                <tr>
                    <th>Order Date</th>
                    <th>Product Name</th>
                    <th>Unit Price</th>
                    <th>Quantity</th>
                    <th>Discount</th>
                    <th>Total Sales</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var r in salesReport)
                {
                    <tr>
                        <td>@r.OrderDate</td>
                        <td>@r.ProductName</td>
                        <td>@r.UnitPrice.ToString("C")</td>
                        <td>@r.Quantity</td>
                        <td>@(r.Discount * 100)%</td>
                        <td>@((r.UnitPrice * r.Quantity) * (1m - (decimal)r.Discount))</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
        
        <div class="border-top border-1 py-2">
            <p class="p-0 fs-4"><strong>Total Sales</strong>: @(salesReport.Sum(r => (r.UnitPrice * r.Quantity) * (1m - (decimal)r.Discount)).ToString("C"))</p>
        </div>
    }
</div>

@code {
    private DateTime StartDate { get; set; } = DateTime.Today.AddDays(-30);
    private DateTime EndDate { get; set; } = DateTime.Today;
    private IList<SalesReport>? salesReport;

    private async Task LoadSalesReport()
    {
        salesReport = await OrderDetailService.GetSalesReportAsync(StartDate, EndDate);

        Console.WriteLine("Sales Report Count: " + salesReport?.Count);
        StateHasChanged();
    }

}