@page "/orders/delete"
@using System.Globalization
@using EStore.Business.Services.IServices
@using EStore.Business.DTOs
@inject IOrderService OrderService
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<div class="container d-flex flex-column gap-4">
    <h3 class="my-4">Order Information</h3>
    @if (order is null)
    {
    <p>
        <em>Loading...</em>
    </p>
    }
    else
    {
    <div class="alert alert-warning" role="alert">
        <strong>Are you sure you want to delete this order?</strong>
        <div class="mt-3">
            <p>
                <strong>Member Email:</strong> @order.MemberEmail
            </p>
            <p>
                <strong>Order Date:</strong> @order.OrderDate
            </p>
            <p>
                <strong>Require Date:</strong> @order.RequireDate
            </p>
            <p>
                <strong>Shipped Date:</strong> @order.ShippedDate
            </p>
            <p>
                <strong>Freight:</strong> @order.Freight?.ToString("C", _usd)
            </p>
        </div>
    </div>

    <div>
        <button class="btn btn-danger col-2" @onclick="DeleteOrder">Delete</button>
        <a href="/orders" class="ms-2">Back to List</a>
    </div>
    }
</div>

@code {
    private OrderDTO? order;
    
    private readonly CultureInfo _usd = new("en-US");
    
    [Parameter]
    [SupplyParameterFromQuery]
    public int OrderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        order = await OrderService.GetOrderByIdAsync(OrderId);
    }

    private async Task DeleteOrder()
    {
        await OrderService.DeleteOrderAsync(OrderId);
        NavigationManager.NavigateTo("/orders");
    }
}
