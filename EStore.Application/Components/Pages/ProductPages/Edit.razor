@page "/products/edit"
@using EStore.Business.DTOs
@using EStore.Business.Services.IServices
@using Microsoft.EntityFrameworkCore
@using EStore.Data.Models
@inject NavigationManager NavigationManager
@inject ICategoryService CategoryService
@inject IProductService ProductService

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Product</h2>
<hr />
@if (Product is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Product" OnValidSubmit="UpdateProduct" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Product.ProductId" value="@Product.ProductId" />
                <div class="mb-3">
                    <label for="categoryid" class="form-label">CategoryId:</label>
                    <InputSelect id="categoryid" class="form-control" @bind-Value="Product.CategoryId">
                        <option value="">Please select a category</option>
                        @foreach (var category in Categories)
                        {
                            <option value="@category.CategoryId">@category.CategoryName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Product.CategoryId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="productname" class="form-label">ProductName:</label>
                    <InputText id="productname" @bind-Value="Product.ProductName" class="form-control" />
                    <ValidationMessage For="() => Product.ProductName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="weight" class="form-label">Weight:</label>
                    <InputText id="weight" @bind-Value="Product.Weight" class="form-control" />
                    <ValidationMessage For="() => Product.Weight" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="unitprice" class="form-label">UnitPrice:</label>
                    <InputNumber id="unitprice" @bind-Value="Product.UnitPrice" class="form-control" />
                    <ValidationMessage For="() => Product.UnitPrice" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="unitslnstock" class="form-label">UnitslnStock:</label>
                    <InputNumber id="unitslnstock" @bind-Value="Product.UnitslnStock" class="form-control" />
                    <ValidationMessage For="() => Product.UnitslnStock" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ProductId { get; set; }

    [SupplyParameterFromForm]
    private ProductDTO? Product { get; set; }
    private List<AddCategoryDTO> Categories { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoryService.GetAllCategoryAsync();
		Product = await ProductService.GetProductByIdAsync(ProductId);

    }

    private async Task UpdateProduct()
    {    
        try
        {

            await ProductService.UpdateProductAsync(Product);
            
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error updating product: {ex.Message}");
            NavigationManager.NavigateTo("/error");
        }
        NavigationManager.NavigateTo("/products");

        
    }

}
