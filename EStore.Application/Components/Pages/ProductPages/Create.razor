@page "/products/create"
@using EStore.Business.DTOs
@using EStore.Business.Services.IServices
@using Microsoft.EntityFrameworkCore
@using EStore.Data.Models
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Product</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Product" OnValidSubmit="AddProduct" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>

            <div class="mb-3">
                <label for="productname" class="form-label">ProductName:</label> 
                <InputText id="productname" @bind-Value="Product.ProductName" class="form-control" /> 
                <ValidationMessage For="() => Product.ProductName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="categoryid" class="form-label">Category:</label>
                <InputSelect id="categoryid" class="form-control" @bind-Value="Product.CategoryId">
                    <option value="">Please select a category</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.CategoryId">@category.CategoryName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Product.CategoryId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="weight" class="form-label">Weight:</label> 
                <InputText id="weight" @bind-Value="Product.Weight" class="form-control" /> 
                <ValidationMessage For="() => Product.Weight" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="unitprice" class="form-label">UnitPrice:</label> 
                <InputNumber id="unitprice" @bind-Value="Product.UnitPrice" class="form-control" /> 
                <ValidationMessage For="() => Product.UnitPrice" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="unitslnstock" class="form-label">UnitslnStock:</label> 
                <InputNumber id="unitslnstock" @bind-Value="Product.UnitslnStock" class="form-control" /> 
                <ValidationMessage For="() => Product.UnitslnStock" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private CreateProductDTO Product { get; set; } = new();
    private List<AddCategoryDTO> Categories { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    protected override async Task OnInitializedAsync()
    {
        try{
            Categories = await CategoryService.GetAllCategoryAsync();
        }
        catch (Exception ex) {
            NavigationManager.NavigateTo("error");

        }
    }
    private async Task AddProduct()
    {
        try
        {
            await ProductService.AddProductAsync(Product);
		}
		catch (Exception ex)
		{
			NavigationManager.NavigateTo("error");
		}
        NavigationManager.NavigateTo("/products");
       
    }
}
