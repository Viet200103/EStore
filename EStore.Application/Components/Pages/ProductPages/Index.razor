@page "/products"
@using EStore.Business.DTOs
@using EStore.Business.Service.IService
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using EStore.Data.Models
@using EStore.Data.Database
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="products/create">Create New</a>
</p>
<div class="mb-3">
    <input @bind="searchTerm" @bind:event="oninput" placeholder="Search products..." class="form-control" />
</div>
@if (ListProductDTOs == null)
{
    <p class="text-danger">Error: Unable to load products. Please try again later.</p>
}
else{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>
                    Product ID
                </th>
                <th>
                    Product Name
                </th>
                <th>
                    Category Name
                </th>
                <th>
                    Weight
                </th>
                <th>
                    Price
                </th>
                <th>
                    Stock
                </th>
            </tr>

        </thead>
        <tbody>
            @foreach (var product in ListProductDTOs)
            {
                <tr>
                    <td>
                        @product.ProductId
                    </td>
                    <td>
                        @product.ProductName
                    </td>
                    <td>
                        @product.Category.CategoryName
                    </td>
                    <td>
                        @product.Weight
                    </td>
                    <td>
                        @product.UnitPrice
                    </td>
                    <td>
                        @product.UnitslnStock
                    </td>
                    <td>
                        <a href="@($"products/edit?productid={product.ProductId}")">Edit</a>
                    </td>
                    <td>
                        <a href="@($"products/delete?productid={product.ProductId}")">Delete</a>
                    </td>

                </tr>
            }
        </tbody>
    </table>
    
    <div class="pagination-controls">
        <input type="button" class="btn-lg btn" id="prev" @onclick="PreviousPage" value="Prev" />
        <input type="button" class="btn-lg btn" id="prev" @onclick="NextPage" value="Next" />
    </div>
}


@code {
    private List<ProductDTO> ListProductDTOs = new();
    private int _currentPage = 0;
    private int pageSize = 10;
    private int totalPages;
	private string searchTerm = "";
	private List<ProductDTO> FilteredProducts = new();

    protected override async Task OnInitializedAsync()
    {
             try{
                 ListProductDTOs = await ProductService.GetAllProductAsync();
             }
             catch (Exception ex) {
                 Console.Error.WriteLine($"Error loading products: {ex.Message}");
        NavigationManager.NavigateTo("/error");
             }
        // await LoadProducts();
    }

    private async Task ApplySearchFilter()
    {
        
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            FilteredProducts = ListProductDTOs;
        }
        else
        {
            FilteredProducts = ListProductDTOs
                .Where(p => p.ProductName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            (p.Category?.CategoryName ?? "").Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private async Task LoadProducts()
    {
        // var totalProducts = await ProductService.GetTotalProductsAsync();
        // totalPages = (int)Math.Ceiling(totalProducts / (double)pageSize);

        // ListProductDTOs = await ProductService.GetPageProductsAsync(_currentPage, pageSize);
		// ApplySearchFilter();
		
		
      
    }

    protected async void PreviousPage()
    {
        if (_currentPage > 0)
        {
            _currentPage--;

            await LoadProducts();
            
        }
    }

    protected async void NextPage()
    {
        if (_currentPage < totalPages - 1)
        {
            _currentPage++;
            await LoadProducts();
        }
      
        
    }
}
