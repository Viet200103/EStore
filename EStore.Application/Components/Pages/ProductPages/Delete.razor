@page "/products/delete"
@using EStore.Business.DTOs
@using EStore.Business.Service.IService
@using Microsoft.EntityFrameworkCore
@using EStore.Data.Models
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Product</h2>
    <hr />
    @if (product is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">CategoryId</dt>
            <dd class="col-sm-10">@product.CategoryId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ProductName</dt>
            <dd class="col-sm-10">@product.ProductName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Weight</dt>
            <dd class="col-sm-10">@product.Weight</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UnitPrice</dt>
            <dd class="col-sm-10">@product.UnitPrice</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UnitslnStock</dt>
            <dd class="col-sm-10">@product.UnitslnStock</dd>
        </dl>
        <EditForm method="post" Model="product" OnValidSubmit="DeleteProduct" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(product is null)">Delete</button> |
            <a href="/products">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private ProductDTO? product;

    [SupplyParameterFromQuery]
    private int ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
		product = await ProductService.GetProductByIdAsync(ProductId);

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteProduct()
    {
        try
        {
			var isDelete = await ProductService.DeleteProductAsync(ProductId);
			if (!isDelete)
            {
                NavigationManager.Refresh();
            }
        }
		catch (Exception ex)
		{
			NavigationManager.NavigateTo("error");
        }
        NavigationManager.NavigateTo("/products");
    }
}
